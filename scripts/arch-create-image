#!/bin/sh

image="arch.img"
image_size="4G"
image_parts='
label: gpt
name="arch-esp",     type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B, size=260M
name="cros-kernel",  type=FE3A2A5D-4F32-41A7-B725-ACCC3285A309, size=64M, attrs="GUID:49,51,53,56"
name="cros-kernel2", type=FE3A2A5D-4F32-41A7-B725-ACCC3285A309, size=64M
name="arch-root",    type=0FC63DAF-8483-4772-8E79-3D69D8477DE4
'
image_loopdev="/dev/loop0"

arch_mirror="https://mirror.fcix.net/archlinux"
arch_tarball="archlinux-bootstrap-x86_64.tar.gz"
arch_base_packages="linux linux-firmware dosfstools zram-generator iwd openssh sudo vim"
arch_dev_packages="base-devel git man-db"
arch_gui_packages="sway polkit i3status swayidle noto-fonts alacritty mesa mesa-utils vulkan-tools"
arch_aur_packages="cgpt-bin"

user_name="olv"
user_password="test0000"

set -e

image_trap() {
	echo "cleaning up..."

	if mountpoint -q "$tmpdir/chroot"; then
		umount "$tmpdir/chroot"
	fi

	if losetup -n -O NAME,BACK-FILE | grep -q "^$image_loopdev .*$tmpdir"; then
		losetup -d "$image_loopdev"
	fi

	if [ -d "$tmpdir" ]; then
		rm -rf "$tmpdir"
	fi
}

image_create() {
	# create and partition the disk image
	fallocate -l "$image_size" "$tmpdir/$image"
	echo "$image_parts" | sfdisk "$tmpdir/$image"

	# set up the loop device
	losetup -P "$image_loopdev" "$tmpdir/$image"
	while [ ! -b "${image_loopdev}p1" ]; do
		sleep 1
	done
	sleep 2

	# format partitions
	mkfs.vfat -F 32 "${image_loopdev}p1"
	mkfs.ext4 "${image_loopdev}p4"
	
	# mount chroot
	mkdir -p "$tmpdir/chroot"
	mount "${image_loopdev}p4" "$tmpdir/chroot"

	# download and untar into chroot
	echo "downloading rootfs..."
	curl "$arch_mirror/iso/latest/$arch_tarball" | tar -zx --warning=no-unknown-keyword -C "$tmpdir/chroot" --strip 1

	# unmount chroot
	umount "$tmpdir/chroot"
}

image_setup() {
	script="/tmp/$(basename "$0")"
	bind="$0:$script"
	systemd-nspawn -i "$tmpdir/$image" --private-users=identity --bind="$bind" "$script" container
}

image_finalize() {
	fsck.vfat -p "${image_loopdev}p1"
	fsck.ext4 -p -f "${image_loopdev}p4"

	losetup -d "$image_loopdev"

	mv "$tmpdir/$image" "$image"
	rm -rf "$tmpdir"

	echo "created $image"
}

container_setup_packages() {
	pacman-key --init
	pacman-key --populate

	echo "Server = $arch_mirror/\$repo/os/\$arch" > "/etc/pacman.d/mirrorlist"
	pacman -R --noconfirm arch-install-scripts
	pacman -Syu --noconfirm $arch_base_packages $arch_dev_packages $arch_gui_packages

	mkdir -p /tmp/aur
	for pkg in $arch_aur_packages; do
		git clone "https://aur.archlinux.org/$pkg.git" "/tmp/aur/$pkg"
		chown -R nobody:nobody "/tmp/aur/$pkg"
		(cd "/tmp/aur/$pkg" && sudo -u nobody makepkg && pacman -U --noconfirm "$pkg"-*.pkg.tar.zst)
	done
	rm -rf /tmp/aur

	yes | pacman -Scc
}

container_setup_bootloader() {
	bootctl install

	echo "default arch-fallback.conf" >> /boot/loader/loader.conf
	cat > /boot/loader/entries/arch-fallback.conf <<EOF
title	Arch Linux Fallback
linux	/vmlinuz-linux
initrd	/initramfs-linux-fallback.img
options	root=PARTLABEL=arch-root
EOF
}

container_setup_system() {
	echo "PARTLABEL=arch-esp	/boot	vfat	defaults	0	2" >> "/etc/fstab"
	echo "PARTLABEL=arch-root	/	ext4	defaults	0	1" >> "/etc/fstab"

	locale="en_US.UTF-8"
	sed -i "s/^#$locale/$locale/" /etc/locale.gen
	locale-gen

	systemd-firstboot \
		--locale="$locale" \
		--timezone="America/Los_Angeles" \
		--hostname="arch"

	sed -i 's/#Storage=auto/Storage=volatile/' /etc/systemd/journald.conf
	for ty in ether wlan; do
		echo -e "[Match]\nType=$ty\n\n[Network]\nDHCP=yes" > "/etc/systemd/network/$ty.network"
	done
	echo -e "[zram0]\nzram-size = ram" > /etc/systemd/zram-generator.conf

	systemctl enable systemd-resolved systemd-networkd sshd

	rm -f /etc/resolv.conf
	rm -f /pkglist.x86_64.txt
	rm -f /version
}

container_setup_user() {
	useradd -m -G wheel,video "$user_name"

	if [ "$user_name" = "olv" ]; then
		my_etc="https://github.com/olvaffe/olv-etc.git"
		my_home="/home/$user_name"

		rm "$my_home/.bashrc"
		rm "$my_home/.bash_profile"
		sudo -u "$user_name" git clone --recurse-submodules "$my_etc" "$my_home/olv-etc"
		sudo -u "$user_name" "$my_home/olv-etc/create-links"
	fi
}

container_setup_login() {
	echo "root:$user_password" | chpasswd
	echo "$user_name:$user_password" | chpasswd

	policy="%wheel ALL=(ALL:ALL) NOPASSWD: ALL"
	sed -i "s/^# $policy/$policy/" /etc/sudoers
}

mode="$1"

if [ "$mode" = "container" ]; then
	#bash
	container_setup_packages
	container_setup_bootloader
	container_setup_system
	container_setup_user
	container_setup_login
	#bash
else
	if [ -f "$image" ]; then
		echo "$image already exists"
		exit 1
	fi

	tmpdir=$(mktemp -d arch-XXXXXX)
	trap "image_trap" EXIT

	image_create
	image_setup
	image_finalize

	trap - EXIT
fi
