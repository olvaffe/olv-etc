#!/bin/sh

mirror="https://mirror.fcix.net/archlinux"
tarball="archlinux-bootstrap-x86_64.tar.gz"
image="arch.img"
loopdev="/dev/loop0"
size="4G"
parts='
label: gpt
name="esp",     type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B, size=260M
name="kernel",  type=FE3A2A5D-4F32-41A7-B725-ACCC3285A309, size=64M
name="kernel2", type=FE3A2A5D-4F32-41A7-B725-ACCC3285A309, size=64M
name="arch",    type=0FC63DAF-8483-4772-8E79-3D69D8477DE4
'

set -e

build_image_trap() {
	tmpdir="$1"

	if mountpoint -q "$tmpdir/chroot"; then
		umount "$tmpdir/chroot"
	fi

	echo "exit"
	losetup -n -O NAME,BACK-FILE
	if losetup -n -O NAME,BACK-FILE | grep -q "^$loopdev .*$tmpdir"; then
		losetup -d "$loopdev"
	fi

	if [ -d "$tmpdir" ]; then
		rm -rf "$tmpdir"
	fi
}

build_image() {
	if [ -f "$image" ]; then
		echo "$image already exists"
		exit 1
	fi

	tmpdir=$(mktemp -d arch-XXXXXX)
	trap "build_image_trap $tmpdir" EXIT
	
	# create and partition the disk image
	fallocate -l "$size" "$tmpdir/$image"
	echo "$parts" | sfdisk "$tmpdir/$image"

	# set up the loop device
	losetup -P "$loopdev" "$tmpdir/$image"
	while [ ! -b "${loopdev}p1" ]; do
		sleep 1;
	done
	sleep 2

	# format partitions
	mkfs.vfat -F 32 "${loopdev}p1"
	mkfs.f2fs -O extra_attr,compression "${loopdev}p4"
	
	# mount chroot
	mkdir -p "$tmpdir/chroot"
	mount "${loopdev}p4" "$tmpdir/chroot"

	# download and bootstrap
	echo "downloading rootfs..."
	curl "$mirror/iso/latest/$tarball" | tar -zx --warning=no-unknown-keyword -C "$tmpdir/chroot" --strip 1
	echo "Server = $mirror/$repo/os/$arch" > "$tmpdir/chroot/etc/pacman.d/mirrorlist"

	trap - EXIT
	umount "$tmpdir/chroot" || :
	losetup -d "$loopdev" || :
	mv "$tmpdir/$image" "$image" || :
	rm -rf "$tmpdir"

	echo "created $image"
}

build_image
