#!/bin/sh

image="arch.img"
size="4G"
parts='
label: gpt
name="esp",     type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B, size=260M
name="kernel",  type=FE3A2A5D-4F32-41A7-B725-ACCC3285A309, size=64M
name="kernel2", type=FE3A2A5D-4F32-41A7-B725-ACCC3285A309, size=64M
name="arch",    type=0FC63DAF-8483-4772-8E79-3D69D8477DE4
'
loopdev="/dev/loop0"
mirror="https://mirror.fcix.net/archlinux"
tarball="archlinux-bootstrap-x86_64.tar.gz"
packages="
linux linux-firmware zram-generator
dosfstools f2fs-tools
sudo vim man-db base-devel git
iwd openssh
sway polkit i3status swayidle noto-fonts alacritty
wayland-utils mesa mesa-utils vulkan-tools
"
me="olv"

set -e

create_image_trap() {
	tmpdir="$1"

	if mountpoint -q "$tmpdir/chroot"; then
		umount "$tmpdir/chroot"
	fi

	echo "exit"
	losetup -n -O NAME,BACK-FILE
	if losetup -n -O NAME,BACK-FILE | grep -q "^$loopdev .*$tmpdir"; then
		losetup -d "$loopdev"
	fi

	if [ -d "$tmpdir" ]; then
		rm -rf "$tmpdir"
	fi
}

create_image() {
	if [ -f "$image" ]; then
		echo "$image already exists"
		exit 1
	fi

	tmpdir=$(mktemp -d arch-XXXXXX)
	trap "build_image_trap $tmpdir" EXIT
	
	# create and partition the disk image
	fallocate -l "$size" "$tmpdir/$image"
	echo "$parts" | sfdisk "$tmpdir/$image"

	# set up the loop device
	losetup -P "$loopdev" "$tmpdir/$image"
	while [ ! -b "${loopdev}p1" ]; do
		sleep 1;
	done
	sleep 2

	# format partitions
	mkfs.vfat -F 32 "${loopdev}p1"
	mkfs.f2fs -O extra_attr,compression "${loopdev}p4"
	
	# mount chroot
	mkdir -p "$tmpdir/chroot"
	mount "${loopdev}p4" "$tmpdir/chroot"

	# download and untar into chroot
	echo "downloading rootfs..."
	curl "$mirror/iso/latest/$tarball" | tar -zx --warning=no-unknown-keyword -C "$tmpdir/chroot" --strip 1
	echo "Server = $mirror/\$repo/os/\$arch" > "$tmpdir/chroot/etc/pacman.d/mirrorlist"

	trap - EXIT
	umount "$tmpdir/chroot" || :
	losetup -d "$loopdev" || :
	mv "$tmpdir/$image" "$image" || :
	rm -rf "$tmpdir"

	echo "created $image"
}

bootstrap_image() {
	script="/tmp/$(basename "$0")"
	bind="$0:$script"
	systemd-nspawn -i "$image" --private-users=identity --bind="$bind" "$script" container
}

container_setup_pacman() {
	echo "Server = $mirror/\$repo/os/\$arch" > "/etc/pacman.d/mirrorlist"

	pacman-key --init
	pacman-key --populate
	pacman -R --noconfirm arch-install-scripts
	pacman -Syu --noconfirm $packages
	yes | pacman -Scc
}

container_setup_system() {
	rm -f /pkglist.x86_64.txt
	rm -f /version

	echo "PARTLABEL=esp	/boot	vfat	defaults	0	2" >> "/etc/fstab"
	echo "PARTLABEL=arch	/	f2fs	defaults	0	1" >> "/etc/fstab"

	echo "arch" > /etc/hostname
	ln -sf /usr/share/zoneinfo/America/Los_Angeles /etc/localtime

	locale="en_US.UTF-8"
	sed -i "s/^#$locale/$locale/" /etc/locale.gen
	echo "LANG=$locale" > /etc/locale.conf
	locale-gen

	echo -e '[zram0]\nzram-size = ram' > /etc/systemd/zram-generator.conf

	systemctl enable iwd systemd-networkd systemd-resolved sshd
}

container_setup_me() {
	useradd -m -G wheel,video "$me"

	my_etc="https://github.com/olvaffe/olv-etc.git"
	my_home="/home/$me"

	sudo -u "$me" git clone --recurse-submodules "$my_etc" "$my_home/olv-etc"
	rm "$my_home/.bashrc"
	rm "$my_home/.bash_profile"
	sudo -u "$me" "$my_home/olv-etc/create-links"
}

container_setup_login() {
	sudo_policy="%wheel ALL=(ALL:ALL) NOPASSWD: ALL"
	sed -i "s/^# $sudo_policy/$sudo_policy/" /etc/sudoers

	passwd -d "$me"
	passwd -d root
}

container_setup_bootloader() {
	bootctl install
	echo 'default arch.conf' >> /boot/loader/loader.conf
	cat > /boot/loader/entries/arch.conf <<EOF
title	Arch Linux
linux	/vmlinuz-linux
initrd	/initramfs-linux.img
options	root=PARTLABEL=arch
EOF
}

mode="$1"

if [ "$mode" = "container" ]; then
	#bash
	container_setup_pacman
	container_setup_system
	container_setup_me
	container_setup_login
	container_setup_bootloader
	#bash
else
	create_image
	bootstrap_image
fi
