#!/bin/sh

image_size="4G"
image_parts='
label: gpt
name="arch-esp",     type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B, size=260M
name="cros-kernel",  type=FE3A2A5D-4F32-41A7-B725-ACCC3285A309, size=64M, attrs="GUID:49,51,53,56"
name="cros-kernel2", type=FE3A2A5D-4F32-41A7-B725-ACCC3285A309, size=64M
name="arch-root",    type=0FC63DAF-8483-4772-8E79-3D69D8477DE4
'
image_loopdev="/dev/loop0"
image_tarball_x86="https://mirror.fcix.net/archlinux/iso/latest/archlinux-bootstrap-x86_64.tar.gz"
image_tarball_arm="http://os.archlinuxarm.org/os/ArchLinuxARM-aarch64-latest.tar.gz"

set -e

image_loop_attach() {
	echo "attaching $image to $image_loopdev..."
	losetup -P "$image_loopdev" "$image"
	while [ ! -b "${image_loopdev}p1" ]; do
		sleep 1
	done
	sleep 2
}

image_loop_format() {
	echo "formatting $image_loopdev..."
	mkfs.vfat -F 32 "${image_loopdev}p1"
	mkfs.ext4 "${image_loopdev}p4"
}

image_loop_mount() {
	echo "mounting $image_loopdev..."
	image_chroot=$(mktemp -d "$image-chroot-XXXXXX")
	mount "${image_loopdev}p4" "$image_chroot"
	if [ -d "$image_chroot/proc" ]; then
		mount -t proc none "$image_chroot/proc"
	fi
}

image_loop_umount() {
	echo "unmounting $image_loopdev..."
	if [ -d "$image_chroot" ]; then
		if mountpoint -q "$image_chroot/proc"; then
			umount "$image_chroot/proc"
		fi
		if mountpoint -q "$image_chroot"; then
			umount "$image_chroot"
		fi
		rmdir "$image_chroot"
	fi
}

image_loop_fsck() {
	echo "checking $image_loopdev..."
	fsck.vfat -p "${image_loopdev}p1"
	fsck.ext4 -p -f "${image_loopdev}p4"
}

image_loop_detach() {
	echo "detaching $image_loopdev..."
	if losetup -n -O NAME,BACK-FILE | grep -q "^$image_loopdev .*$image$"; then
		losetup -d "$image_loopdev"
	fi
}

image_create() {
	echo "creating $image..."
	fallocate -l "$image_size" "$image"
	echo "$image_parts" | sfdisk "$image"

	image_loop_attach
	image_loop_format
	image_loop_mount

	# download and untar into the chroot
	echo "downloading rootfs..."
	case "$image_arch" in
		x86)
			curl "$image_tarball_x86" | tar -zx --warning=no-unknown-keyword -C "$image_chroot" --strip 1
			;;
		arm)
			curl -L "$image_tarball_arm" | tar -zx --warning=no-unknown-keyword -C "$image_chroot"
			;;
	esac

	image_loop_umount
	image_loop_fsck
	image_loop_detach
}

image_setup_packages() {
	chroot "$image_chroot" pacman-key --init
	chroot "$image_chroot" pacman-key --populate
	chroot "$image_chroot" pacman -R --noconfirm dhcpcd linux-aarch64 nano net-tools netctl vi which || true
	chroot "$image_chroot" pacman -Syu --noconfirm linux-firmware-qcom zram-generator iwd openssh sudo vim
	yes | chroot "$image_chroot" pacman -Scc
}

image_setup_etc() {
	echo "PARTLABEL=arch-esp	/boot	vfat	defaults	0	2" >> "$image_chroot/etc/fstab"
	echo "PARTLABEL=arch-root	/	ext4	defaults	0	1" >> "$image_chroot/etc/fstab"

	echo "arch" > "$image_chroot/etc/hostname"
	ln -sf /usr/share/zoneinfo/America/Los_Angeles "$image_chroot/etc/localtime"

	locale="en_US.UTF-8"
	echo "LANG=$locale" > "$image_chroot/etc/locale.conf"
	sed -i "s/^#$locale/$locale/" "$image_chroot/etc/locale.gen"
	chroot "$image_chroot" locale-gen

	policy="%wheel ALL=(ALL:ALL) NOPASSWD: ALL"
	sed -i "s/^# $policy/$policy/" "$image_chroot/etc/sudoers"

	rm -f "$image_chroot/etc/resolv.conf"
	for ty in ether wlan; do
		echo -e "[Match]\nType=$ty\n\n[Network]\nDHCP=yes" > "$image_chroot/etc/systemd/network/$ty.network"
	done
	echo -e "[zram0]\nzram-size = ram" > "$image_chroot/etc/systemd/zram-generator.conf"

	chroot "$image_chroot" systemctl enable systemd-resolved systemd-networkd sshd

	echo "root:test0000" | chroot "$image_chroot" chpasswd
}

image_setup() {
	image_loop_attach
	image_loop_mount

	image_setup_packages
	image_setup_etc

	image_loop_umount
	image_loop_fsck
	image_loop_detach
}

image_trap() {
	echo "cleaning up..."
	image_loop_umount
	image_loop_detach
	[ "$image_cmd" = "create" ] && rm -f "$image"
}

image_usage() {
	echo "Usage: $0 <create|setup> <image-filename> <x86|arm>"
	exit 1
}

if [ "$#" -ne 3 ]; then
	image_usage
fi

image_cmd="$1"
image="$2"
image_arch="$3"

trap "image_trap" EXIT

case "$image_cmd" in
	create)
		image_create
		;;
	setup)
		image_setup
		;;
	*)
		image_usage
		;;
esac

trap - EXIT
