#!/bin/sh

# Assuming 4 types of devices
#
#  - workstations
#  - duts
#  - containers
#  - servers

# for bootstrapping (~800M)
cli_min="
	base
	btrfs-progs
	dosfstools
	sudo
	vim
"

# for all devices (~50M)
cli_base="
	htop
	ldns
	logrotate
	lsof
	openssh
	rsync
	usbutils
"

# for all except servers (~300M)
cli_std="
	bc
	ctags
	git
	man-db
	man-pages
	python
	strace
	tmux
	trace-cmd
	unzip
	vulkan-tools
	zip
"

# for workstations (~550M)
cli_full="
	android-tools
	mesa-utils
	msmtp
	nordvpn-bin
	perf
	picocom
	wireguard-tools
"

# for gui testing (~200M)
gui_min="
	alacritty
	i3status
	noto-fonts
	polkit
	sway
"

# for simple use (~150M)
gui_base="
	brightnessctl
	grim
	mako
	slurp
	swayidle
	swayimg
	swaylock
	wayland-utils
	wl-clipboard
"

# for real use (~1250M)
gui_std="
	fcitx5-chewing
	fcitx5-configtool
	fcitx5-gtk
	google-chrome
	gtk4
	noto-fonts-cjk
	noto-fonts-emoji
	pipewire-pulse
"

# for optional features (~300M)
gui_full="
	cups
	mpv
	xdg-desktop-portal-gtk
	xdg-desktop-portal-wlr
"

# for compile (~350M)
dev_min="
	base-devel
	ccache
	cmake
	meson
"

# for development (~450M)
dev_base="
	clang
	gdb
"

# for mesa (~250M)
dev_mesa="
	glslang
	libclc
	llvm
	spirv-llvm-translator
"

# for cross-compile (~600M)
dev_cross="
	aarch64-linux-gnu-gcc
	qemu-user-static-binfmt
"

kernel_common="
	zram-generator
"

kernel_x86="
	linux
	sbctl
	systemd-ukify
"

hw_intel="
	linux-firmware-intel
	intel-ucode
	vulkan-intel
"

hw_amd="
	amd-ucode
	linux-firmware-amdgpu
	vulkan-radeon
"

hw_arm="
	archlinuxarm-keyring
"

hw_wifi="
	iw
	iwd
	wireless-regdb
"

hw_usbnet="
	linux-firmware-realtek
"

hw_xps="
	bcm20702a1-firmware
	broadcom-wl-dkms
	linux-headers
	wpa_supplicant
"

hw_dut="
	seatd
"

cros_x86="
	cgpt-bin
"

cros_arm="
	vboot-utils
"

cros_crostini="
	cros-container-guest-tools-git
"

pkgs=""

host="$(uname -n)"
case "$host" in
	"t580")
		pkgs="$pkgs $cli_min $cli_base $cli_std $cli_full"
		pkgs="$pkgs $gui_min $gui_base $gui_std $gui_full"
		pkgs="$pkgs $dev_min $dev_base $dev_mesa $dev_cross"

		pkgs="$pkgs $kernel_common $kernel_x86"
		pkgs="$pkgs $hw_intel $hw_wifi"
		;;
	"xps")
		pkgs="$pkgs $cli_min $cli_base $cli_std $cli_full"
		pkgs="$pkgs $gui_min $gui_base $gui_std $gui_full"
		pkgs="$pkgs $dev_min $dev_base $dev_mesa $dev_cross"

		pkgs="$pkgs $kernel_common $kernel_x86"
		pkgs="$pkgs $hw_intel $hw_wifi $hw_xps"
		;;
	"opi")
		pkgs="$pkgs $cli_min $cli_base $cli_std"
		pkgs="$pkgs $gui_min"
		pkgs="$pkgs $dev_min $dev_base $dev_mesa"

		pkgs="$pkgs $kernel_common"
		pkgs="$pkgs $hw_arm $hw_dut"
		;;
	"navi")
		pkgs="$pkgs $cli_min $cli_base $cli_std"
		pkgs="$pkgs $gui_min"
		pkgs="$pkgs $dev_min $dev_base $dev_mesa"

		pkgs="$pkgs $kernel_common"
		pkgs="$pkgs $hw_arm $hw_usbnet $hw_dut"
		pkgs="$pkgs $cros_arm"
		;;
	"skyrim")
		pkgs="$pkgs $cli_min $cli_base $cli_std"
		pkgs="$pkgs $gui_min"
		pkgs="$pkgs $dev_min $dev_base $dev_mesa"

		pkgs="$pkgs $kernel_common"
		pkgs="$pkgs $hw_amd $hw_usbnet $hw_dut"
		pkgs="$pkgs $cros_x86"
		;;
	"crostini")
		pkgs="$pkgs $cli_min $cli_base $cli_std"

		pkgs="$pkgs $cros_crostini"
		;;
	*)
		echo "unknown device: $host"
		exit 1
		;;
esac

qeq="$(pacman -Qeq)"
if [ -n "$qeq" ]; then
	pacman -Dq --asdeps $qeq
fi

#pacman -S --needed $pkgs
pacman -Dq --asexplicit $pkgs
