#!/bin/sh

set -e

if [ $(id -u) -ne 0 ]; then
	echo "Please run as root."
	exit 1
fi

if [ "$#" -lt 1 ]; then
	echo "Usage: $0 <SYSROOT> [x86_64|aarch64] [bootable]"
	exit 1
fi

sysroot="$(realpath $1)"
machine="$2"
bootable="$3"
[ -z "$machine" ] && machine=$(uname -m)
[ -n "$bootable" ] && bootable="1"

bootstrap_tarball_x86="https://mirror.fcix.net/archlinux/iso/latest/archlinux-bootstrap-x86_64.tar.gz"
bootstrap_mirror_x86="https://mirror.fcix.net/archlinux/\$repo/os/\$arch"
bootstrap_tarball_arm="http://os.archlinuxarm.org/os/ArchLinuxARM-aarch64-latest.tar.gz"
bootstrap_mirror_arm="http://mirror.archlinuxarm.org/\$arch/\$repo"
hostname="arch-chroot"

case "$machine" in
	x86_64)
		bootstrap_tarball="$bootstrap_tarball_x86"
		bootstrap_mirror="$bootstrap_mirror_x86"
		;;
	aarch64)
		bootstrap_tarball="$bootstrap_tarball_arm"
		bootstrap_mirror="$bootstrap_mirror_arm"
		;;
	*)
		echo "Unsupported machine $machine."
		exit 1
		;;
esac

arch_chroot_phase1_try_nsenter() {
	bash_pids=$(pgrep -x "bash")
	for pid in $bash_pids; do
		# root must be $sysroot
		[ $(realpath "/proc/$pid/root") = "$sysroot" ] || continue

		# pid1 must be bash
		pid1="/proc/$pid/root/proc/1"
		[ -d "$pid1"  -a $(cat "$pid1/comm") = "bash" ] || continue

		# pid1 must have ARCH_CHROOT_PHASE=chroot
		pid1_env=$(cat "$pid1/environ" | tr '\0' '\n')
		eval "$pid1_env"
		[ "$ARCH_CHROOT_PHASE" = "chroot" ] || continue

		echo "phase1: nsentering pid $pid..."
		exec nsenter -a -t "$pid" chroot "$sysroot" \
			env -C "$HOME" -i $pid1_env "$SHELL" -l
	done
}

arch_chroot_phase12_common() {
	if [ -n "$SUDO_UID" -a -n "$SUDO_GID" ]; then
		real_uid="$SUDO_UID"
		real_gid="$SUDO_GID"
	elif id -u "chronos" > /dev/null 2>/dev/null; then
		real_uid=$(id -u "chronos")
		real_gid=$(id -g "chronos")
	elif [ -d "$sysroot" ]; then
		real_uid=$(stat -c "%u" "$sysroot")
		real_gid=$(stat -c "%g" "$sysroot")
	else
		real_uid="0"
		real_gid="0"
	fi
}

arch_chroot_phase1_bootstrap() {
	if [ -f "$sysroot/etc/arch-release" -a \
	     ! -f "$sysroot/arch-chroot-phase1-bootstrap" ]; then
			return
	fi

	if [ -n "$bootable" ]; then
		read -p "Boostrap $sysroot for $machine? [y/N] " yn
	else
		read -p "Boostrap $sysroot for $machine and user $(id -un $real_uid)? [y/N] " yn
	fi
	[ "$yn" = "y" -o "$yn" = "yes" ] || exit

	mkdir -p "$sysroot"
	touch "$sysroot/arch-chroot-phase1-bootstrap"

	echo "phase1: downloading rootfs to $sysroot..."

	tar_args="-zx --warning=no-unknown-keyword"
	[ "$machine" = "x86_64" ] && tar_args="$tar_args --strip-components=1"
	curl -L "$bootstrap_tarball" | tar -C "$sysroot" $tar_args

	[ -z "$bootable" ] && chown -R "$real_uid:$real_gid" "$sysroot"

	touch "$sysroot/arch-chroot-phase3-bootstrap"
	rm -f "$sysroot/arch-chroot-phase1-bootstrap"
}

arch_chroot_phase1_transition() {
	echo "phase1: entering intermediate mount namespace..."

	# restart in phase2
	exec unshare --mount env ARCH_CHROOT_PHASE="phase2" "$0" "$@"
}

arch_chroot_phase1() {
	# see if we can nsenter previously-created namespaces
	arch_chroot_phase1_try_nsenter

	# phase1 runs as root outside of namespaces
	arch_chroot_phase12_common
	arch_chroot_phase1_bootstrap
	arch_chroot_phase1_transition "$@"
}

arch_chroot_phase2_mount_sys() {
	echo "phase2: mounting system filesystems..."

	# pacman CheckSpace expects / to be a mountpoint
	mount --bind "$sysroot" "$sysroot"

	mount -t tmpfs none "$sysroot/tmp"
	mount -t tmpfs none "$sysroot/run"
}

arch_chroot_phase2_bind_mount_sys() {
	echo "phase2: bind-mounting system filesystems..."

	mount --bind "/sys" "$sysroot/sys"
	mount --rbind "/dev" "$sysroot/dev"
}

arch_chroot_phase2_bind_mount_app() {
	echo "phase2: bind-mounting sockets..."

	wayland_display=""
	wl_sock=$(find /run -name "wayland-*" -type s -print -quit 2>/dev/null || true)
	if [ -n "$wl_sock" ]; then
		wl_bind="/run/$(basename "$wl_sock")"
		touch "$sysroot/$wl_bind"
		mount --bind "$wl_sock" "$sysroot/$wl_bind"

		wayland_display="$wl_bind"
	fi

	display=""
	x11_sock=$(find /tmp/.X11-unix -name "X*" -type s -print -quit 2>/dev/null || true)
	if [ -n "$x11_sock" ]; then
		mkdir -p "$sysroot/$(dirname "$x11_sock")"
		touch "$sysroot/$x11_sock"
		mount --bind "$x11_sock" "$sysroot/$x11_sock"

		display=$(echo $(basename "$x11_sock") | tr X :)
	fi

	dev_log_sock="/run/systemd/journal/dev-log"
	if [ -S "$dev_log_sock" ]; then
		mkdir -p "$sysroot/$(dirname "$dev_log_sock")"
		touch "$sysroot/$dev_log_sock"
		mount --bind "$dev_log_sock" "$sysroot/$dev_log_sock"
	fi

	perfetto_sock="/tmp/perfetto-producer"
	if [ -S "$perfetto_sock" ]; then
		touch "$sysroot/$perfetto_sock"
		mount --bind "$perfetto_sock" "$sysroot/$perfetto_sock"
	fi

	perfetto_dir="/run/perfetto"
	if [ -d "$perfetto_dir" ]; then
		mkdir "$sysroot/$perfetto_dir"
		mount --bind "$perfetto_dir" "$sysroot/$perfetto_dir"
	fi
}

arch_chroot_phase2_transition() {
	echo "phase2: entering namespaces..."

	sudo="sudo -u #$real_uid -g #$real_gid"

	user_ns_args="--user --map-root-user"
	pid_ns_args="--pid --fork"
	# no --net
	misc_ns_args="--mount --uts --time --ipc --cgroup"

	if [ -n "$bootable" ]; then
		sudo=""
		user_ns_args=""
	fi

	chroot_env=""
	if [ -n "$wayland_display" ]; then
		chroot_env="$chroot_env WAYLAND_DISPLAY=$wayland_display"
	fi
	if [ -n "$display" ]; then
		chroot_env="$chroot_env DISPLAY=$display"
	fi

	# restart in phase3
	exec $sudo unshare $user_ns_args $pid_ns_args $misc_ns_args \
		env ARCH_CHROOT_PHASE="phase3" ARCH_CHROOT_ENV="$chroot_env" \
		"$0" "$@"
}

arch_chroot_phase2() {
	# phase2 runs as root in the intermediate mount namespace
	arch_chroot_phase12_common
	arch_chroot_phase2_mount_sys
	arch_chroot_phase2_bind_mount_sys
	arch_chroot_phase2_bind_mount_app
	arch_chroot_phase2_transition "$@"
}

arch_chroot_phase3_mount_proc() {
	echo "phase3: mounting /proc..."
	mount -t proc -o nosuid,nodev,noexec none "$sysroot/proc"
}

arch_chroot_phase3_fix_network() {
	echo "phase3: fixing network..."
	rm -f "$sysroot/etc/resolv.conf"
	cp /etc/resolv.conf "$sysroot/etc/resolv.conf"
}

arch_chroot_phase3_bootstrap() {
	if [ ! -f "$sysroot/arch-chroot-phase3-bootstrap" ]; then
		return
	fi

	echo "phase3: bootstrapping $sysroot..."

	echo "$hostname" > "$sysroot/etc/hostname"
	ln -sf /usr/share/zoneinfo/America/Los_Angeles "$sysroot/etc/localtime"

	locale="en_US.UTF-8"
	echo "LANG=$locale" > "$sysroot/etc/locale.conf"
	sed -i "s/^#$locale/$locale/" "$sysroot/etc/locale.gen"
	chroot "$sysroot" locale-gen

	# work out packages to remove
	explicit_packages=$(chroot "$sysroot" pacman -Qeq)
	dep_packages=""
	for pkg in $explicit_packages; do
		case "$pkg" in
			base|archlinuxarm-keyring) ;;
			*) dep_packages="$dep_packages $pkg"
		esac
	done
	if [ -n "$dep_packages" ]; then
		chroot "$sysroot" pacman -D --asdep $dep_packages
	fi
	remove_packages=$(chroot "$sysroot" pacman -Qttdq)

	echo "Server = $bootstrap_mirror" > "$sysroot/etc/pacman.d/mirrorlist"
	chroot "$sysroot" pacman-key --init
	chroot "$sysroot" pacman-key --populate
	[ -n "$remove_packages" ] && chroot "$sysroot" pacman -R --noconfirm $remove_packages
	chroot "$sysroot" pacman -Syu --needed --noconfirm inetutils vim

	echo "root:test0000" | chroot "$sysroot" chpasswd

	rm -f "$sysroot/pkglist.x86_64.txt"
	rm -f "$sysroot/version"

	[ -n "$bootable" ] && touch "$sysroot/arch-chroot-phase3-bootable"
	#touch /arch-chroot-phase3-dev

	rm -f "$sysroot/arch-chroot-phase3-bootstrap"

	echo
	echo "bootstrapped $sysroot!"
}

arch_chroot_phase3_hostname() {
	echo "phase3: setting hostname..."
	chroot "$sysroot" hostname "$hostname"
}

arch_chroot_phase3_bootable() {
	if [ ! -f "$sysroot/arch-chroot-phase3-bootable" ]; then
		return
	fi

	echo "phase3: performing bootable setup..."

	chroot "$sysroot" pacman -S --needed --noconfirm \
		linux-firmware linux-firmware-qcom \
		zram-generator dosfstools sudo \
		iwd openssh \
		git \
		sway polkit noto-fonts i3status alacritty

	if [ "$machine" = "x86_64" ]; then
		chroot "$sysroot" pacman -S --needed --noconfirm base-devel

		mkdir -p "$sysroot/tmp/aur"
		for pkg in cgpt-bin; do
			chroot "$sysroot" git clone "https://aur.archlinux.org/$pkg.git" "/tmp/aur/$pkg"
			chroot "$sysroot" chown -R nobody:nobody "/tmp/aur/$pkg"
			chroot "$sysroot" env -C "/tmp/aur/$pkg" sudo -u nobody makepkg
			tarball=$(basename "$sysroot/tmp/aur/$pkg/"*.tar.zst)
			chroot "$sysroot" pacman -U --needed --noconfirm "/tmp/aur/$pkg/$tarball"
		done
		rm -rf "$sysroot/tmp/aur"
	fi

	yes | chroot "$sysroot" pacman -Scc

	echo "arch" > "$sysroot/etc/hostname"

	echo "PARTLABEL=arch-esp	/boot	vfat	defaults	0	2" > "$sysroot/etc/fstab"
	echo "PARTLABEL=arch-root	/	ext4	defaults	0	1" >> "$sysroot/etc/fstab"

	echo -e "[zram0]\nzram-size = ram" > "$sysroot/etc/systemd/zram-generator.conf"

	rm -f "$sysroot/etc/resolv.conf"
	for ty in ether wlan; do
		echo -e "[Match]\nType=$ty\n\n[Network]\nDHCP=yes" > "$sysroot/etc/systemd/network/$ty.network"
	done

	chroot "$sysroot" systemctl enable systemd-resolved systemd-networkd sshd

	policy="%wheel ALL=(ALL:ALL) NOPASSWD: ALL"
	sed -i "s/^# $policy/$policy/" "$sysroot/etc/sudoers"

	chroot "$sysroot" useradd -m -G wheel olv || true
	echo "olv:test0000" | chroot "$sysroot" chpasswd

	rm -f "$sysroot/arch-chroot-phase3-bootable"
}

arch_chroot_phase3_dev() {
	if [ ! -f "$sysroot/arch-chroot-phase3-dev" ]; then
		return
	fi

	echo "phase3: performing dev setup..."

	chroot "$sysroot" pacman -S --needed --noconfirm \
		base-devel ccache git ctags meson \
		man-db man-pages \
		strace \
		python-mako python-jinja \
		mesa mesa-utils \
		glslang vulkan-tools vulkan-headers \
		wayland-utils wayland-protocols \
		xorg-xwayland xorg-xev

	home="/root"
	chroot "$sysroot" git clone --recurse-submodules "https://github.com/olvaffe/olv-etc.git" "$home/olv-etc" || true
	HOME="$home" chroot "$sysroot" "$home/olv-etc/create-links"

	projects="
		https://chromium.googlesource.com/chromiumos/platform2
		https://gitlab.freedesktop.org/mesa/mesa.git
	"
	mkdir -p "$sysroot$home/projects"
	for proj in $projects; do
		dst=$(basename "$proj" .git)
		chroot "$sysroot" git clone "$proj" "$home/projects/$dst" || true
	done

	rm -f "$sysroot/arch-chroot-phase3-dev"
}

arch_chroot_phase3_chroot() {
	echo "phase3: entering $sysroot..."
	echo

	home="/root"
	shell="/bin/bash"
	chroot_env="TERM=$TERM HOME=$home SHELL=$shell LOGNAME=root USER=root $ARCH_CHROOT_ENV"

	exec chroot "$sysroot" env -C "$home" -i ARCH_CHROOT_PHASE="chroot" $chroot_env "$SHELL" -l
}

arch_chroot_phase3() {
	# phase3 runs as root inside namespaces (and as $real_uid outside of namespaces)
	arch_chroot_phase3_mount_proc
	arch_chroot_phase3_fix_network
	arch_chroot_phase3_bootstrap
	arch_chroot_phase3_hostname

	# these are optional
	arch_chroot_phase3_bootable
	arch_chroot_phase3_dev

	arch_chroot_phase3_chroot
}

case "$ARCH_CHROOT_PHASE" in
	phase2)
		arch_chroot_phase2 "$@"
		;;
	phase3)
		arch_chroot_phase3 "$@"
		;;
	*)
		arch_chroot_phase1 "$@"
		;;
esac
