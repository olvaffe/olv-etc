#!/bin/sh

set -e

if [ $(id -u) -ne 0 ]; then
	echo "Please run as root."
	exit 1
fi

if [ "$#" -ne 1 ]; then
	echo "Usage: $0 <NEWROOT>"
	exit 1
fi

newroot="$(realpath $1)"
mirror="https://mirror.fcix.net/archlinux"
hostname="arch-chroot"
username="olv"

arch_chroot_phase1_download() {
	if [ -f "$newroot/etc/arch-release" -a ! -f "$newroot/$hostname-download" ]; then
		return
	fi

	read -p "Boostrap $newroot? " unused

	mkdir -p "$newroot"
	touch "$newroot/$hostname-download"

	echo "downloading rootfs to $newroot..."
	curl "$mirror/iso/latest/archlinux-bootstrap-x86_64.tar.gz" | \
		tar -zx --warning=no-unknown-keyword -C "$newroot" --strip 1

	touch "$newroot/$hostname-bootstrap"
	rm -f "$newroot/$hostname-download"
}

arch_chroot_phase1_namespace() {
	echo "entering mount namespace..."
	# restart in phase2
	ARCH_CHROOT_PHASE="phase2" exec unshare --mount "$0" "$@"
}

arch_chroot_phase1() {
	# no namspace yet
	arch_chroot_phase1_download
	arch_chroot_phase1_namespace "$@"
}

arch_chroot_phase2_mount_sys() {
	echo "mounting system filesystems..."

	# pacman CheckSpace expects / to be a mountpoint
	mount --bind "$newroot" "$newroot"

	mount -t tmpfs none "$newroot/tmp"
	mount -t tmpfs none "$newroot/run"
}

arch_chroot_phase2_bind_mount_sys() {
	echo "bind-mounting system filesystems..."

	mount --bind -o ro "/sys" "$newroot/sys"
	mount --rbind "/dev" "$newroot/dev"
}

arch_chroot_phase2_bind_mount_app() {
	echo "bind-mounting sockets..."

	wl_sock=$(find /run -name "wayland-*" -type s -print -quit 2>/dev/null || true)
	if [ -n "$wl_sock" ]; then
		wl_bind="/run/$(basename "$wl_sock")"

		touch "$newroot/$wl_bind"
		mount --bind -o ro "$wl_sock" "$newroot/$wl_bind"
		export WAYLAND_DISPLAY="$wl_bind"
	fi

	x11_sock=$(find /tmp/.X11-unix -name "X*" -type s -print -quit 2>/dev/null || true)
	if [ -n "$x11_sock" ]; then
		mkdir -p "$newroot/$(dirname "$x11_sock")"
		touch "$newroot/$x11_sock"
		export DISPLAY=$(echo $(basename "$x11_sock") | tr X :)
		mount --bind -o ro "$x11_sock" "$newroot/$x11_sock"
	fi

	perfetto_sock="/tmp/perfetto-producer"
	if [ -S "$perfetto_sock" ]; then
		touch "$newroot/$perfetto_sock"
		mount --bind -o ro "$perfetto_sock" "$newroot/$perfetto_sock"
	fi

	perfetto_dir="/run/perfetto"
	if [ -d "$perfetto_dir" ]; then
		mkdir "$newroot/$perfetto_dir"
		mount --bind -o ro "$perfetto_dir" "$newroot/$perfetto_dir"
	fi
}

arch_chroot_phase2_namespace() {
	echo "entering all namespaces..."

	user_ns_args="--user --map-users=auto --map-groups=auto"
	# disable --user because it requires /etc/sub{uid,gid} to be set up
	user_ns_args=""

	pid_ns_args="--pid --fork"

	# no --net
	misc_ns_args="--mount --uts --time --ipc --cgroup"

	# restart in phase3
	ARCH_CHROOT_PHASE="phase3" exec unshare $user_ns_args $pid_ns_args $misc_ns_args "$0" "$@"
}

arch_chroot_phase2() {
	# in mount namespace
	arch_chroot_phase2_mount_sys
	arch_chroot_phase2_bind_mount_sys
	arch_chroot_phase2_bind_mount_app
	arch_chroot_phase2_namespace "$@"
}

arch_chroot_phase3_mount_proc() {
	echo "mounting /proc..."
	mount -t proc -o ro none "$newroot/proc"
}

arch_chroot_phase3_fix_network() {
	echo "fixing network..."
	cp /etc/resolv.conf "$newroot/etc/resolv.conf"
}

arch_chroot_phase3_bootstrap() {
	if [ ! -f "$newroot/$hostname-bootstrap" ]; then
		return
	fi

	echo "bootstrapping $newroot..."

	echo "$hostname" > "$newroot/etc/hostname"
	ln -sf /usr/share/zoneinfo/America/Los_Angeles "$newroot/etc/localtime"

	locale="en_US.UTF-8"
	echo "LANG=$locale" > "$newroot/etc/locale.conf"
	sed -i "s/^#$locale/$locale/" "$newroot/etc/locale.gen"
	chroot "$newroot" locale-gen

	echo "Server = $mirror/\$repo/os/\$arch" > "$newroot/etc/pacman.d/mirrorlist"
	chroot "$newroot" pacman-key --init
	chroot "$newroot" pacman-key --populate
	chroot "$newroot" pacman -R --noconfirm arch-install-scripts || true
	chroot "$newroot" pacman -Syu --noconfirm inetutils sudo vim git

	policy="%wheel ALL=(ALL:ALL) NOPASSWD: ALL"
	sed -i "s/^# $policy/$policy/" "$newroot/etc/sudoers"

	chroot "$newroot" useradd -m -G wheel "$username" || true
	echo "root:test0000" | chroot "$newroot" chpasswd
	echo "$username:test0000" | chroot "$newroot" chpasswd

	if [ "$username" = "olv" ]; then
		rm -f "$newroot/home/$username/.bash"*
		chroot "$newroot" su - "$username" -c "git clone https://github.com/olvaffe/olv-etc.git" || true
		chroot "$newroot" su - "$username" -c "./olv-etc/create-links"
	fi

	rm -f "$newroot/pkglist.x86_64.txt"
	rm -f "$newroot/version"
	rm -f "$newroot/$hostname-bootstrap"

	echo
	echo "bootstrapped $newroot!"
}

arch_chroot_phase3_hostname() {
	echo "setting hostname..."
	chroot "$newroot" hostname "$hostname"
}

arch_chroot_phase3_chroot() {
	echo "entering $newroot..."
	echo

	chroot "$newroot" su -w WAYLAND_DISPLAY,DISPLAY - "$username"
}

arch_chroot_phase3() {
	# in all namespaces
	arch_chroot_phase3_mount_proc
	arch_chroot_phase3_fix_network
	arch_chroot_phase3_bootstrap
	arch_chroot_phase3_hostname

	arch_chroot_phase3_chroot
}

case "$ARCH_CHROOT_PHASE" in
	phase2)
		arch_chroot_phase2 "$@"
		;;
	phase3)
		arch_chroot_phase3 "$@"
		;;
	*)
		arch_chroot_phase1 "$@"
		;;
esac
