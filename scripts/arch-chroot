#!/bin/sh

set -e

username="olv"

if [ "$#" -ne 1 ]; then
	echo "Usage: $0 <NEWROOT>"
	exit 1
fi

if [ $(id -u) -ne 0 ]; then
	echo "Please run as root."
	exit 1
fi

unshare_and_restart() {
	echo "entering namespace..."

	# no --net nor --user
	pid_ns_args="--pid --fork"
	misc_ns_args="--ipc --mount --uts --cgroup --time"

	exec unshare $pid_ns_args $misc_ns_args "$0" "$@"
}

if [ "$$" -ne "1" ]; then
	unshare_and_restart "$@"
fi

newroot="$1"
mirror="https://mirror.fcix.net/archlinux"

chroot_bootstrap() {
	if [ -d "$newroot" ]; then
		return 0
	fi

	read -p "$newroot does not exist.  Bootstrap? " unused
	echo "bootstrapping..."

	mkdir -p "$newroot"
	curl "$mirror/iso/latest/archlinux-bootstrap-x86_64.tar.gz" | \
		tar -zx --warning=no-unknown-keyword -C "$newroot" --strip 1

	touch "$newroot/arch-chroot-bootstrap2"
}

chroot_pseudo_mounts() {
	echo "mounting pseudo filesystems..."

	# pacman CheckSpace expects / to be a mountpoint
	mount --bind "$newroot" "$newroot"

	mount -t proc none "$newroot/proc"

	mount -t sysfs none "$newroot/sys"
	mount -t bpf none "$newroot/sys/fs/bpf"
	mount -t cgroup2 none "$newroot/sys/fs/cgroup"
	mount -t pstore none "$newroot/sys/fs/pstore"
	mount -t debugfs none "$newroot/sys/kernel/debug"
	mount -t tracefs none "$newroot/sys/kernel/tracing"

	mount -t devtmpfs none "$newroot/dev"
	[ -d "$newroot/dev/mqueue" ] && mount -t mqueue none "$newroot/dev/mqueue"
	mount -t devpts none "$newroot/dev/pts"
	mount -t tmpfs none "$newroot/dev/shm"

	mount -t tmpfs none "$newroot/run"
	mount -t tmpfs none "$newroot/tmp"
}

chroot_fixups() {
	echo "applying fixups..."

	cp /etc/resolv.conf "$newroot/etc/resolv.conf"

	if command -v hostname > /dev/null; then
		hostname "arch-chroot"
	fi
}

chroot_bootstrap2() {
	if [ ! -f "$newroot/arch-chroot-bootstrap2" ]; then
		return
	fi

	echo "one-time setup..."

	rm -f "$newroot/pkglist.x86_64.txt"
	rm -f "$newroot/version"

	ln -sf /usr/share/zoneinfo/America/Los_Angeles "$newroot/etc/localtime"

	locale="en_US.UTF-8"
	echo "LANG=$locale" > "$newroot/etc/locale.conf"
	sed -i "s/^#$locale/$locale/" "$newroot/etc/locale.gen"
	chroot "$newroot" locale-gen

	echo "Server = $mirror/\$repo/os/\$arch" > "$newroot/etc/pacman.d/mirrorlist"
	chroot "$newroot" pacman-key --init
	chroot "$newroot" pacman-key --populate
	chroot "$newroot" pacman -R --noconfirm arch-install-scripts
	chroot "$newroot" pacman -Syu --noconfirm sudo vim git

	policy="%wheel ALL=(ALL:ALL) NOPASSWD: ALL"
	sed -i "s/^# $policy/$policy/" "$newroot/etc/sudoers"

	chroot "$newroot" useradd -m -G wheel "$username"
	echo "root:test0000" | chroot "$newroot" chpasswd
	echo "$username:test0000" | chroot "$newroot" chpasswd

	if [ "$username" = "olv" ]; then
		rm -f "$newroot/home/$username/.bash"*
		chroot "$newroot" su - "$username" -c "git clone https://github.com/olvaffe/olv-etc.git"
		chroot "$newroot" su - "$username" -c "./olv-etc/create-links"
	fi

	rm -f "$newroot/arch-chroot-bootstrap2"

	echo
	echo "bootstrapped $newroot!"
}

chroot_bind_mounts() {
	echo "bind-mounting display server sockets..."

	wl_sock=$(find /run -name "wayland-*" -type s -print -quit 2>/dev/null || true)
	if [ -n "$wl_sock" ]; then
		wl_bind="/run/$(basename "$wl_sock")"

		touch "$newroot/$wl_bind"
		mount --bind -o ro "$wl_sock" "$newroot/$wl_bind"
		export WAYLAND_DISPLAY="$wl_bind"
	fi

	x11_sock=$(find /tmp/.X11-unix -name "X*" -type s -print -quit 2>/dev/null || true)
	if [ -n "$x11_sock" ]; then
		mkdir -p "$newroot/$(dirname "$x11_sock")"
		touch "$newroot/$x11_sock"
		export DISPLAY=$(echo $(basename "$x11_sock") | tr X :)
		mount --bind -o ro "$x11_sock" "$newroot/$x11_sock"
	fi
}

chroot_enter() {
	echo "entering $newroot..."
	echo

	exec chroot "$newroot" su -w WAYLAND_DISPLAY,DISPLAY - "$username"
}

# prepare the chroot
chroot_bootstrap
chroot_pseudo_mounts
chroot_fixups

chroot_bootstrap2
chroot_bind_mounts
chroot_enter
