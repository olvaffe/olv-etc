#!/bin/sh

# Tips for ndk
#
#  - thread_local uses __tls_get_addr that is only available on higher api
#    level
#  - specify both sysroot and ndk_root if pkg-config is used
#  - add -static-libstdc++ to cpp_link_args if C++ is used

ndk_api="28"

if [ $# -lt 4 ]; then
	echo "$0 <linux|cros|ndk> <x86|arm> <64|32> <sysroot> [ndk_root]"
	exit 1
fi

flavor="$1"
arch="$2"
bits="$3"
sysroot="$4"
ndk_root="$5"

init_vars() {
	# https://mesonbuild.com/Reference-tables.html#cpu-families
	# https://wiki.debian.org/Multiarch/Tuples
	# https://clang.llvm.org/docs/CrossCompilation.html
	meson_system=""
	meson_cpu_family=""
	meson_cpu=""
	target_arch=""
	target_vendor=""
	target_sys="linux"
	target_env=""

	case "$arch-$bits" in
		x86-64)
			meson_cpu_family="x86_64"
			meson_cpu="x86_64"
			target_arch="x86_64"
			;;
		x86-32)
			meson_cpu_family="x86"
			meson_cpu="i686"
			target_arch="i386"
			;;
		arm-64)
			meson_cpu_family="aarch64"
			meson_cpu="aarch64"
			target_arch="aarch64"
			;;
		arm-32)
			meson_cpu_family="arm"
			meson_cpu="armv7a"
			target_arch="arm"
			target_env="eabihf"
			;;
		*)
			echo "unknown $arch-$bits"
			exit 1
			;;
	esac
	case "$flavor" in
		linux)
			meson_system="linux"
			target_env="gnu$target_env"
			;;
		cros)
			meson_system="linux"
			target_arch="$meson_cpu"
			target_vendor="cros-"
			target_env="gnu$target_env"
			;;
		ndk)
			meson_system="android"
			target_arch="$meson_cpu"
			target_env="android${target_env%hf}$ndk_api"
			;;
		*)
			echo "unknown $flavor"
			exit 1
			;;
	esac

	target_triple="$target_arch-$target_vendor$target_sys-$target_env"

	case "$flavor" in
		linux)
			toolchain_prefix=""
			if [ "$arch" != "x86" ]; then
				toolchain_prefix="$target_triple-"
			fi

			common_args="'--sysroot', sysroot"
			if [ "$arch-$bits" = "x86-32" ]; then
				common_args="'-m32', $common_args"
			fi
			;;
		cros)
			toolchain_prefix=""
			common_args="'-target', '$target_triple', '--sysroot', sysroot"
			;;
		ndk)
			if [ -z "$ndk_root" ]; then
				ndk_root="$sysroot"
				sysroot="/not-exist"
			fi

			toolchain_prefix="$ndk_root/toolchains/llvm/prebuilt/linux-x86_64/bin/"
			common_args="'-target', '$target_triple'"
			;;
	esac

	local basedirs="/usr/lib /usr/lib64 /usr/lib/$target_triple /usr/share"
	pkgconfigdirs=""
	for b in $basedirs; do
		if [ -d "$sysroot$b/pkgconfig" ]; then
			pkgconfigdirs="$pkgconfigdirs:$sysroot$b/pkgconfig"
		fi
	done
	pkgconfigdirs="${pkgconfigdirs#:}"
}

init_vars

gen_constants() {
	cat <<EOF
[constants]
toolchain_prefix = '$toolchain_prefix'
sysroot = '$sysroot'
common_args = [$common_args]
EOF
}

gen_binaries_gcc() {
	cat <<EOF
[binaries]
ar = toolchain_prefix + 'ar'
c = toolchain_prefix + 'gcc'
cpp = toolchain_prefix + 'g++'
strip = toolchain_prefix + 'strip'
pkgconfig = '/usr/bin/pkg-config'
EOF
}

gen_binaries_llvm() {
	cat <<EOF
[binaries]
ar = toolchain_prefix + 'llvm-ar'
c = toolchain_prefix + 'clang'
cpp = toolchain_prefix + 'clang++'
strip = toolchain_prefix + 'llvm-strip'
pkgconfig = '/usr/bin/pkg-config'
EOF
}

gen_builtin_options() {
	cat <<EOF
[built-in options]
c_args = common_args + []
c_link_args = common_args + []
cpp_args = common_args + []
cpp_link_args = common_args + []
EOF
}

gen_properties() {
	# only for PKG_CONFIG_SYSROOT_DIR and PKG_CONFIG_LIBDIR
	cat <<EOF
[properties]
sys_root = sysroot
pkg_config_libdir = '$pkgconfigdirs'
EOF
}

gen_host_machine() {
	cat <<EOF
[host_machine]
system = '$meson_system'
cpu_family = '$meson_cpu_family'
cpu = '$meson_cpu'
endian = 'little'
EOF
}

gen_constants
echo
case "$flavor" in
	linux)
		gen_binaries_gcc
		;;
	cros|ndk)
		gen_binaries_llvm
		;;
esac
echo
gen_builtin_options
echo
gen_properties
echo
gen_host_machine
