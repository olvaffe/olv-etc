#!/bin/sh

android_api="28"

if [ $# -ne 4 ]; then
	echo "$0 <arm|x86> <32|64> <linux|cros|android> <sysroot|ndk_root>"
	exit 1
fi

arch="$1"
bits="$2"
system="$3"
sysroot="$4"

init_vars() {
	# https://mesonbuild.com/Reference-tables.html#cpu-families
	# https://wiki.debian.org/Multiarch/Tuples
	# https://clang.llvm.org/docs/CrossCompilation.html
	target_vendor=""
	target_env="gnu"
	meson_system="$system"

	case "$arch-$bits" in
		x86-64)
			target_arch="x86_64"
			meson_cpu_family="x86_64"
			meson_cpu="x86_64"
			;;
		x86-32)
			target_arch="i386"
			meson_cpu_family="x86"
			meson_cpu="i686"
			;;
		arm-64)
			target_arch="aarch64"
			meson_cpu_family="aarch64"
			meson_cpu="aarch64"
			;;
		arm-32)
			target_arch="arm"
			target_env="gnueabihf"
			meson_cpu_family="arm"
			meson_cpu="armv7a"
			;;
		*)
			echo "unknown $arch-$bits"
			exit 1
			;;
	esac

	case "$system" in
		linux)
			args="'--sysroot', sysroot"
			if [ "$arch-$bits" = "x86-32" ]; then
				args="'-m32', $args"
			fi
			;;
		cros)
			target_vendor="cros"
			meson_system="linux"
			args="'-target', target_triple, '--sysroot', sysroot"
			;;
		android)
			ndk_root="$sysroot"
			sysroot="/not-exist"

			target_env="android$android_api"
			args="'-target', target_triple"
			;;
		*)
			echo "unknown $system"
			exit 1
			;;
	esac

	if [ -n "$target_vendor" ]; then
		target_triple="$target_arch-$target_vendor-linux-$target_env"
	else
		target_triple="$target_arch-linux-$target_env"
	fi

	local basedirs="/usr/lib /usr/lib/$target_triple /usr/share"
	pkgconfigdirs=""
	for b in $basedirs; do
		pkgconfigdirs="$pkgconfigdirs:$sysroot$b/pkgconfig"
	done
	pkgconfigdirs="${pkgconfigdirs#:}"
}

init_vars

gen_constants() {
	cat <<EOF
[constants]
target_triple = '$target_triple'
sysroot = '$sysroot'
EOF
}

gen_binaries_linux() {
	cat <<EOF
[binaries]
ar = target_triple + '-ar'
c = target_triple + '-gcc'
cpp = target_triple + '-g++'
strip = target_triple + '-strip'
pkgconfig = '/usr/bin/pkg-config'
EOF
}

gen_binaries_cros() {
	cat <<EOF
[binaries]
ar = 'llvm-ar'
c = 'clang'
cpp = 'clang++'
strip = 'llvm-strip'
pkgconfig = '/usr/bin/pkg-config'
EOF
}

gen_binaries_android() {
	ndk_bin="$ndk_root/toolchains/llvm/prebuilt/linux-x86_64/bin"
	cat <<EOF
[binaries]
ar = '$ndk_bin/llvm-ar'
c = '$ndk_bin/clang'
cpp = '$ndk_bin/clang++'
strip = '$ndk_bin/llvm-strip'
pkgconfig = '/usr/bin/pkg-config'
EOF
}

gen_builtin_options() {
	cat <<EOF
[built-in options]
c_args = [$args]
c_link_args = [$args]
cpp_args = [$args]
cpp_link_args = [$args]
EOF
}

gen_properties() {
	# only for PKG_CONFIG_SYSROOT_DIR and PKG_CONFIG_LIBDIR
	cat <<EOF
[properties]
sys_root = sysroot
pkg_config_libdir = '$pkgconfigdirs'
EOF
}

gen_host_machine() {
	cat <<EOF
[host_machine]
system = '$meson_system'
cpu_family = '$meson_cpu_family'
cpu = '$meson_cpu'
endian = 'little'
EOF
}

gen_constants
echo
case "$system" in
	linux)
		gen_binaries_linux
		;;
	cros)
		gen_binaries_cros
		;;
	android)
		gen_binaries_android
		;;
esac
echo
gen_builtin_options
echo
gen_properties
echo
gen_host_machine
