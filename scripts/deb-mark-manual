#!/bin/sh

# Assuming 4 types of devices
#
#  - workstations
#  - duts
#  - containers
#  - servers

# for bootstrapping
cli_min="
	btrfs-progs
	dosfstools
	e2fsprogs
	fdisk
	init
	sudo
	vim
	whiptail
"

# for all devices
cli_base="
	bc
	curl
	git
	htop
	iproute2
	iputils-ping
	iputils-tracepath
	ldnsutils
	less
	logrotate
	lsof
	man-db
	openssh-client
	openssh-server
	pciutils
	procps
	rsync
	systemd-resolved
	usbutils
"

# for all except servers
cli_std="
	manpages
	manpages-dev
	python3-venv
	strace
	systemd-container
	tmux
	trace-cmd
	universal-ctags
	unzip
	vulkan-tools
	zip
"

# for workstations
cli_full="
	adb
	git-email
	linux-perf
	mesa-utils
	msmtp
	picocom
	wireguard-tools
"

# for gui testing
gui_min="
	alacritty
	fonts-noto-core
	i3status
	polkitd
	sway
"

# for simple use
gui_base="
	brightnessctl
	grim
	mako-notifier
	slurp
	swayidle
	swayimg
	swaylock
	wayland-utils
	wl-clipboard
"

# for real use
gui_std="
	fcitx5
	fcitx5-chewing
	fonts-noto-cjk
	fonts-noto-color-emoji
	google-chrome-stable
	libgtk-4-1
	pipewire-pulse
"

# for optional features
gui_full="
	cups
	mpv
	xdg-desktop-portal-gtk
	xdg-desktop-portal-wlr
"

# for compile
dev_min="
	build-essential
	bison
	ccache
	cmake
	flex
	meson
	pkgconf
"

# for development
dev_base="
	clang
	clang-format
	gdb
"

# for mesa
dev_mesa="
	glslang-tools
	libclang-cpp-dev
	libclang-dev
	libclc-19-dev
	libdrm-dev
	libllvmspirvlib-19-dev
	libwayland-dev
	libx11-xcb-dev
	libxcb1-dev
	libxcb-dri3-dev
	libxcb-present-dev
	libxcb-randr0-dev
	libxcb-shm0-dev
	libxrandr-dev
	libxshmfence-dev
	llvm-dev
"

# for cross-compile
dev_cross="
	debootstrap
	gcc-aarch64-linux-gnu
	g++-aarch64-linux-gnu
	qemu-user-binfmt
"

hw_metal="
	systemd-zram-generator
"

hw_x86="
	linux-image-amd64
	systemd-ukify
"

hw_intel="
	firmware-intel-graphics
	firmware-iwlwifi
	intel-microcode
	mesa-vulkan-drivers
"

hw_wifi="
	iw
	iwd
	wireless-regdb
"

hw_arm="
	linux-image-arm64
"

hw_rpi="
	cnrdrvcups-ufr2-us
	containers-storage
	ksmbd-tools
	nginx
	php-fpm
	podman
	systemd-journal-remote
"

hw_npi="
	firmware-realtek
	iproute2
	iputils-ping
	kea-dhcp4-server
	logrotate
	nftables
	openssh-server
	procps
	systemd-journal-remote
	unbound
"

pkgs=""

host="$(uname -n)"
case "$host" in
	"rpi")
		pkgs="$pkgs $cli_min $cli_base"
		pkgs="$pkgs $hw_metal $hw_arm $hw_rpi"
		;;
	"npi")
		pkgs="$pkgs $cli_min"
		pkgs="$pkgs $hw_metal $hw_arm $hw_npi"
		;;
	*)
		echo "unknown device: $host"
		exit 1
		;;
esac

manual="$(apt-mark showmanual)"
if [ -n "$manual" ]; then
	apt-mark auto $manual > /dev/null
fi

#apt install $pkgs
apt-mark manual $pkgs | grep -v ' set to manually installed\.$'
