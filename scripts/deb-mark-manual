#!/bin/sh

# Assuming 4 types of devices
#
#  - workstations
#  - duts
#  - containers
#  - servers

# for bootstrapping (~300M)
cli_min="
	btrfs-progs
	dosfstools
	e2fsprogs
	fdisk
	init
	sudo
	vim
	whiptail
"

# for all devices (~100M)
cli_base="
	$cli_min
	curl
	htop
	iproute2
	iputils-ping
	ldnsutils
	less
	logrotate
	lsof
	openssh-client
	openssh-server
	pciutils
	procps
	rsync
	systemd-resolved
	usbutils
"

# for all except servers (~400M)
cli_std="
	$cli_base
	bc
	git
	linux-perf
	man-db
	manpages
	manpages-dev
	ncal
	python3-venv
	strace
	systemd-container
	tmux
	trace-cmd
	universal-ctags
	unzip
	vulkan-tools
	zip
"

# for workstations (~400M)
cli_full="
	$cli_std
	adb
	git-email
	jq
	mesa-utils
	msmtp
	picocom
	wireguard-tools
"

# for gui testing (~100M)
gui_min="
	alacritty
	brightnessctl
	fonts-noto-core
	i3status
	polkitd
	sway
	swayidle
	wayland-utils
"

# for simple use (~150M)
gui_base="
	$gui_min
	grim
	mako-notifier
	slurp
	swayimg
	swaylock
	wl-clipboard
"

# for real use (~1000M)
gui_std="
	$gui_base
	fcitx5
	fcitx5-chewing
	fonts-noto-cjk
	fonts-noto-color-emoji
	google-chrome-stable
	libgtk-4-1
	pipewire-pulse
"

# for optional features (~450M)
gui_full="
	$gui_std
	cups
	mpv
	xdg-desktop-portal-gtk
	xdg-desktop-portal-wlr
"

# for compile (~400M)
dev_min="
	build-essential
	bison
	ccache
	cmake
	flex
	meson
	pkgconf
"

# for development (~750M)
dev_base="
	$dev_min
	clang
	clang-format
	gdb
"

# for mesa (~400M)
dev_mesa="
	glslang-tools
	libclang-cpp-dev
	libclang-dev
	libclc-19-dev
	libdrm-dev
	libllvmspirvlib-19-dev
	libwayland-dev
	libx11-xcb-dev
	libxcb1-dev
	libxcb-dri3-dev
	libxcb-present-dev
	libxcb-randr0-dev
	libxcb-shm0-dev
	libxrandr-dev
	libxshmfence-dev
	llvm-dev
"

# all except libelf-dev are for cros kernel
dev_kernel="
	cgpt
	device-tree-compiler
	libelf-dev
	lz4
	vboot-kernel-utils
"

# for cross-compile (~750M)
dev_cross="
	debootstrap
	gcc-aarch64-linux-gnu
	g++-aarch64-linux-gnu
	qemu-user-binfmt
"

kernel_common="
	systemd-zram-generator
"

kernel_x86="
	$kernel_common
	linux-image-amd64
"

kernel_arm="
	$kernel_common
	linux-image-arm64
"

hw_x86="
	linux-cpupower
"

hw_uefi="
	systemd-ukify
"

hw_intel="
	firmware-intel-graphics
	firmware-iwlwifi
	intel-microcode
	mesa-vulkan-drivers
"

hw_wifi="
	iw
	iwd
	wireless-regdb
"

hw_usbnet="
	firmware-realtek
"

hw_rpi="
	cnrdrvcups-ufr2-us
	containers-storage
	git
	hdparm
	ksmbd-tools
	msmtp
	nginx
	php-fpm
	python3-venv
	podman
	systemd-journal-remote
	tmux
	zip
"

hw_npi="
	firmware-realtek
	iproute2
	iputils-ping
	kea-dhcp4-server
	logrotate
	nftables
	openssh-server
	procps
	systemd-journal-remote
	unbound
"

pkgs=""

host="$(uname -n)"
case "$host" in
	"rpi")
		pkgs="$pkgs $cli_base $kernel_arm $hw_rpi"
		;;
	"npi")
		pkgs="$pkgs $cli_min $kernel_arm $hw_npi"
		;;
	*)
		echo "unknown device: $host"
		exit 1
		;;
esac

manual="$(apt-mark showmanual)"
if [ -n "$manual" ]; then
	apt-mark auto $manual > /dev/null
fi

#apt install $pkgs
apt-mark manual $pkgs | grep -v ' set to manually installed\.$'
