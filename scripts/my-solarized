#!/bin/env python

import colour
import numpy as np
from yaml import dump

"""
The original values are:

SOLARIZED HEX     16/8 TERMCOL  XTERM/HEX   L*A*B      RGB         HSB
--------- ------- ---- -------  ----------- ---------- ----------- -----------
base03    #002b36  8/4 brblack  234 #1c1c1c 15 -12 -12   0  43  54 193 100  21
base02    #073642  0/4 black    235 #262626 20 -12 -12   7  54  66 192  90  26
base01    #586e75 10/7 brgreen  240 #585858 45 -07 -07  88 110 117 194  25  46
base00    #657b83 11/7 bryellow 241 #626262 50 -07 -07 101 123 131 195  23  51
base0     #839496 12/6 brblue   244 #808080 60 -06 -03 131 148 150 186  13  59
base1     #93a1a1 14/4 brcyan   245 #8a8a8a 65 -05 -02 147 161 161 180   9  63
base2     #eee8d5  7/7 white    254 #e4e4e4 92 -00  10 238 232 213  44  11  93
base3     #fdf6e3 15/7 brwhite  230 #ffffd7 97  00  10 253 246 227  44  10  99
yellow    #b58900  3/3 yellow   136 #af8700 60  10  65 181 137   0  45 100  71
orange    #cb4b16  9/3 brred    166 #d75f00 50  50  55 203  75  22  18  89  80
red       #dc322f  1/1 red      160 #d70000 50  65  45 220  50  47   1  79  86
magenta   #d33682  5/5 magenta  125 #af005f 50  65 -05 211  54 130 331  74  83
violet    #6c71c4 13/5 brmagenta 61 #5f5faf 50  15 -45 108 113 196 237  45  77
blue      #268bd2  4/4 blue      33 #0087ff 55 -10 -45  38 139 210 205  82  82
cyan      #2aa198  6/6 cyan      37 #00afaf 60 -35 -05  42 161 152 175  74  63
green     #859900  2/2 green     64 #5f8700 60 -20  65 133 153   0  68 100  60
green     #719e07 (used in solarized.vim)   60 -30  60 113 158   7
"""
ORIGINAL_SOLARIZED_PALETTE = {
    'base03':   np.array([15, -12, -12]), # bg
    'base02':   np.array([20, -12, -12]), # bg highlight, ui bg
    'base01':   np.array([45,  -7,  -7]), # secondary fg
    'base00':   np.array([50,  -7,  -7]), # ui fg
    'base0':    np.array([60,  -6,  -3]), # fg
    'base1':    np.array([65,  -5,  -2]), # fg highlight
    'base2':    np.array([92,   0,  10]), # unused in dark mode
    'base3':    np.array([97,   0,  10]), # unused in dark mode
    'yellow':   np.array([60,  10,  65]),
    'orange':   np.array([50,  50,  55]),
    'red':      np.array([50,  65,  45]),
    'magenta':  np.array([50,  65,  -5]),
    'violet':   np.array([50,  15, -45]),
    'blue':     np.array([55, -10, -45]),
    'cyan':     np.array([60, -35,  -5]),
    'green':    np.array([60, -20,  65]),
}

MODIFIED_SOLARIZED_PALETTE = {
    # decrease lumi for bg; use grayscale
    'base03':   np.array([  0,   0,   0]),
    'base02':   np.array([  5,   0,   0]),
    'base01':   np.array([ 20,   0,   0]),
    # decrease lumi for secondary fg
    'base00':   np.array([ 45,   0,   0]),
    # increase lumi for fg
    'base0':    np.array([ 65,   0,   0]),
    'base1':    np.array([ 75,   0,   0]),
    'base2':    np.array([ 95,   0,   0]),
    'base3':    np.array([100,   0,   0]),
    # target base1 lumi minus 15 for colors
    'yellow':   np.array([ 60,  10,  65]),
    'orange':   np.array([ 60,  50,  55]),
    'red':      np.array([ 60,  65,  45]),
    'magenta':  np.array([ 60,  65,  -5]),
    'violet':   np.array([ 60,  15, -45]),
    'blue':     np.array([ 60, -10, -45]),
    'cyan':     np.array([ 60, -35,  -5]),
    # use new green value
    'green':    np.array([ 60, -30,  60]),
}

BASE16_MAP = {
    'base00': 'base03',  # bg: text (ANSI black)
    'base01': 'base02',  # bg: ui
    'base02': 'base01',  # bg: selection
    'base03': 'base00',  # fg: comment and ui (ANSI bright black)
    'base04': 'base0',   # fg: ui highlight
    'base05': 'base1',   # fg: text (ANSI white)
    'base06': 'base2',   # fg: rarely unused
    'base07': 'base3',   # fg: rarely unused (ANSI bright white)

    'base08': 'red',     # (ANSI normal and brigt red)
    'base09': 'orange',
    'base0A': 'yellow',  # (ANSI normal and brigt yellow)
    'base0B': 'green',   # (ANSI normal and brigt green)
    'base0C': 'cyan',    # (ANSI normal and brigt cyan)
    'base0D': 'blue',    # (ANSI normal and brigt blue)
    'base0E': 'magenta', # (ANSI normal and brigt magenta)
    'base0F': 'violet',
}

ANSI_MAP = {
    'black': 'base00',
    'red': 'base08',
    'green': 'base0B',
    'yellow': 'base0A',
    'blue': 'base0D',
    'magenta': 'base0E',
    'cyan': 'base0C',
    'white': 'base05',
    'bright-black': 'base03',
    'bright-red': 'base08',
    'bright-green': 'base0B',
    'bright-yellow': 'base0A',
    'bright-blue': 'base0D',
    'bright-magenta': 'base0E',
    'bright-cyan': 'base0C',
    'bright-white': 'base07',
}

class LabRGB:
    def __init__(self):
        self.d50 = colour.CCS_ILLUMINANTS['CIE 1931 2 Degree Standard Observer']['D50']

    def lab_to_rgb(self, lab):
        xyz = colour.Lab_to_XYZ(lab, illuminant=self.d50)
        rgb = colour.XYZ_to_sRGB(xyz, illuminant=self.d50,
                                 chromatic_adaptation_transform='Bradford')
        if rgb.max() > 1.10 or rgb.min() < -0.10:
            raise Exception(f'{lab} is converted to {rgb}')

        return rgb.clip(0.0, 1.0)

    def rgb_to_lab(self, rgb):
        xyz = colour.sRGB_to_XYZ(rgb, illuminant=self.d50,
                                 chromatic_adaptation_transform='Bradford')
        return colour.XYZ_to_Lab(xyz, illuminant=self.d50)

    def rgb_to_hsv(self, rgb):
        return colour.RGB_to_HSV(rgb)

    def rgb_to_hex(self, val):
        val = (val * 255.0).round().astype('B')
        return val.tobytes().hex()

    def hsv_print(self, val):
        val = np.array([val[0] * 360, val[1] * 100, val[2] * 100])
        val = val.round().astype(int)
        print(val)

conv = LabRGB()

base16_palette = {}
for base16, solarized in BASE16_MAP.items():
    lab = MODIFIED_SOLARIZED_PALETTE[solarized]
    rgb = conv.lab_to_rgb(lab)
    val = '#' + conv.rgb_to_hex(rgb)
    #print(f'solarized {solarized}: "{val}"')

    base16_palette[base16] = val

ansi_palette = {}
for ansi, base16 in ANSI_MAP.items():
    ansi_palette[ansi] = base16_palette[base16]

base16_yaml = {
    'scheme': 'Solarized Dark Modified',
    'author': 'Chia-I Wu',
}
base16_yaml.update(base16_palette)

alacritty_yaml = {
    'color-schemes': {
        'solarized': {
            'primary': {
            },
            'normal': {
            },
            'bright': {
            },
        },
    },
}

alacritty_yaml['color-schemes']['solarized']['primary']['background'] = ansi_palette['black']
alacritty_yaml['color-schemes']['solarized']['primary']['foreground'] = ansi_palette['white']

for name, color in ansi_palette.items():
    if name.startswith('bright-'):
        name = name[7:]
        intensity = 'bright'
    else:
        intensity = 'normal'

    alacritty_yaml['color-schemes']['solarized'][intensity][name] = color

print('base16 color scheme:')
print(dump(base16_yaml))
print
print('alacritty config:')
print(dump(alacritty_yaml))
print
print('vim config:')
for name, color in base16_palette.items():
    print(f'let s:gui{name[4:]}        = "{color[1:]}"')
